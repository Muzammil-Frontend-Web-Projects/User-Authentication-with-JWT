// Mock API service - In real app, replace with actual backend API calls
const API_URL = 'https://jsonplaceholder.typicode.com';

// Mock user database
const mockUsers = [
  { id: 1, email: 'user@example.com', password: 'password123', name: 'John Doe', role: 'customer' },
  { id: 2, email: 'admin@example.com', password: 'admin123', name: 'Admin User', role: 'admin' }
];

export const authService = {
  // Login user
  async login(email, password) {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Find user in mock database
    const user = mockUsers.find(u => u.email === email && u.password === password);
    
    if (!user) {
      throw new Error('Invalid email or password');
    }

    // Create JWT token (in real app, this would come from backend)
    const token = this.generateToken(user);
    
    return {
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role
      }
    };
  },

  // Generate mock JWT token
  generateToken(user) {
    // In real app, this would be generated by backend
    const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
    const payload = btoa(JSON.stringify({
      userId: user.id,
      email: user.email,
      name: user.name,
      role: user.role,
      exp: Date.now() + (24 * 60 * 60 * 1000) // 24 hours
    }));
    const signature = btoa('mock-signature');
    
    return `${header}.${payload}.${signature}`;
  },

  // Verify token
  verifyToken(token) {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return null;
      
      const payload = JSON.parse(atob(parts[1]));
      
      // Check if token is expired
      if (payload.exp < Date.now()) {
        return null;
      }
      
      return payload;
    } catch (error) {
      return null;
    }
  },

  // Get current user
  async getCurrentUser() {
    const token = localStorage.getItem('token');
    if (!token) return null;

    const payload = this.verifyToken(token);
    if (!payload) {
      localStorage.removeItem('token');
      return null;
    }

    // Simulate API call to get user details
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const user = mockUsers.find(u => u.id === payload.userId);
    if (!user) return null;

    return {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role
    };
  },

  // Logout user
  logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }
};